<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://ajitdevkota.github.io//</id><title>Ajit Devkota</title><subtitle>Structural Engineer</subtitle> <updated>2022-05-15T14:58:44+00:00</updated> <author> <name>Ajit Devkota</name> <uri>https://ajitdevkota.github.io//</uri> </author><link rel="self" type="application/atom+xml" href="https://ajitdevkota.github.io//feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://ajitdevkota.github.io//"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> Â© 2022 Ajit Devkota </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Python Based 2D Truss Solver</title><link href="https://ajitdevkota.github.io//posts/TrussSolver/" rel="alternate" type="text/html" title="Python Based 2D Truss Solver" /><published>2022-04-20T12:55:00+00:00</published> <updated>2022-05-14T04:23:39+00:00</updated> <id>https://ajitdevkota.github.io//posts/TrussSolver/</id> <content src="https://ajitdevkota.github.io//posts/TrussSolver/" /> <author> <name>Ajit Devkota</name> </author> <summary> Overview: In this post, a direct stiffness method based solver is discussed for 2D linear truss systems. Consider the following truss structure. The Global Member Stiffness Matrix as follows: #Global Member Stiffness Matrix def K_ele(n): Length = L[n] Angle = theta[n] c = math.cos(Angle) s = math.sin(Angle) K11 = (E*A/Length)*np.array([[c**2,c*s],[c*s,s**2]]) ... </summary> </entry> <entry><title>Step-by-step piece-wise exact method for linear SDOF systems using Python</title><link href="https://ajitdevkota.github.io//posts/PEM/" rel="alternate" type="text/html" title="Step-by-step piece-wise exact method for linear SDOF systems using Python" /><published>2022-04-01T12:55:00+00:00</published> <updated>2022-05-14T04:23:39+00:00</updated> <id>https://ajitdevkota.github.io//posts/PEM/</id> <content src="https://ajitdevkota.github.io//posts/PEM/" /> <author> <name>Ajit Devkota</name> </author> <summary> Overview: To use this method, consider an input waveform of frequency 1Hz sampled at 0.01 sec. We want to determine the displacement response using PEM. Formulation: The following following formulations is used. The constant are taken from Humar, 2002. \[u_{n+1} = A\:u_n + B\:\dot{u}_{n} +C\:p_n + D\:p_{n+1}\] \[\dot{u}_{n+1} = A_1\:u_n + B_1\:\dot{u}_n + C_1\:p_n + D_1\:p_{n+1}\] C... </summary> </entry> </feed>
